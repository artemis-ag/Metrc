require:
  - rubocop-performance

AllCops:
  Exclude:
    - 'bin/console'
    - 'bin/assessment'
    - 'bin/tag-finder'
    - 'bin/data-fetcher'
    - 'spec/support/*'
    - 'spec/spec_helper.rb'
    - 'vendor/**/*'

Layout/LineLength:
  Max: 1000

Metrics/MethodLength:
  Max: 20

Metrics/ClassLength:
  Max: 1500

Metrics/BlockLength:
  Max: 2000

Style/FrozenStringLiteralComment:
  Enabled: false

# Mixing the styles looks just silly.
Style/HashSyntax:
  EnforcedStyle: ruby19_no_mixed_keys

# has_key? and has_value? are far more readable than key? and value?
Style/PreferredHashMethods:
  Enabled: false

# String#% is by far the least verbose and only object oriented variant.
Style/FormatString:
  EnforcedStyle: percent

Style/CollectionMethods:
  Enabled: true
  PreferredMethods:
    # inject seems more common in the community.
    reduce: "inject"

# Either allow this style or don't. Marking it as safe with parenthesis
# is silly. Let's try to live without them for now.
Style/ParenthesesAroundCondition:
  AllowSafeAssignment: false

Lint/AssignmentInCondition:
  AllowSafeAssignment: false

# A specialized exception class will take one or more arguments and construct the message from it.
# So both variants make sense.
Style/RaiseArgs:
  Enabled: false

# Indenting the chained dots beneath each other is not supported by this cop,
# see https://github.com/bbatsov/rubocop/issues/1633
Layout/MultilineOperationIndentation:
  Enabled: false

# Fail is an alias of raise. Avoid aliases, it's more cognitive load for no gain.
# The argument that fail should be used to abort the program is wrong too,
# there's Kernel#abort for that.
Style/SignalException:
  EnforcedStyle: only_raise

# Suppressing exceptions can be perfectly fine, and be it to avoid to
# explicitly type nil into the rescue since that's what you want to return,
# or suppressing LoadError for optional dependencies
Lint/SuppressedException:
  Enabled: false

Lint/AmbiguousRegexpLiteral:
  Enabled: false

Layout/SpaceInsideBlockBraces:
  # The space here provides no real gain in readability while consuming
  # horizontal space that could be used for a better parameter name.
  # Also {| differentiates better from a hash than { | does.
  SpaceBeforeBlockParameters: false

# { ... } for multi-line blocks is okay, follow Weirichs rule instead:
# https://web.archive.org/web/20140221124509/http://onestepback.org/index.cgi/Tech/Ruby/BraceVsDoEnd.rdoc
Style/BlockDelimiters:
  Enabled: false

# do / end blocks should be used for side effects,
# methods that run a block for side effects and have
# a useful return value are rare, assign the return
# value to a local variable for those cases.
Style/MethodCalledOnDoEndBlock:
  Enabled: true

# Enforcing the names of variables? To single letter ones? Just no.
Style/SingleLineBlockParams:
  Enabled: false

# Shadowing outer local variables with block parameters is often useful
# to not reinvent a new name for the same thing, it highlights the relation
# between the outer variable and the parameter. The cases where it's actually
# confusing are rare, and usually bad for other reasons already, for example
# because the method is too long.
Lint/ShadowingOuterLocalVariable:
  Enabled: false

# Check with yard instead.
Style/Documentation:
  Enabled: false

# This is just silly. Calling the argument `other` in all cases makes no sense.
Naming/BinaryOperatorParameterName:
  Enabled: false

# There are valid cases, for example debugging Cucumber steps,
# also they'll fail CI anyway
Lint/Debugger:
  Enabled: false

# Style preference
Style/MethodDefParentheses:
  Enabled: false

Style/HashEachMethods:
  Enabled: false

Style/HashTransformKeys:
  Enabled: false

Style/RedundantSelf:
  Enabled: false

Style/HashTransformValues:
  Enabled: false

Layout/FirstHashElementIndentation:
  Enabled: false

Lint/RaiseException:
  Enabled: false

Lint/StructNewOverride:
  Enabled: false

Layout/EmptyLinesAroundAttributeAccessor:
  Enabled: false

Layout/SpaceAroundMethodCallOperator:
  Enabled: false

Lint/BinaryOperatorWithIdenticalOperands:
  Enabled: false

Lint/DeprecatedOpenSSLConstant:
  Enabled: false

Lint/DuplicateElsifCondition:
  Enabled: false

Lint/DuplicateRescueException:
  Enabled: false

Lint/EmptyConditionalBody:
  Enabled: false

Lint/FloatComparison:
  Enabled: false

Lint/MissingSuper:
  Enabled: false

Lint/MixedRegexpCaptureTypes:
  Enabled: false

Lint/OutOfRangeRegexpRef:
  Enabled: false

Lint/SelfAssignment:
  Enabled: false

Lint/TopLevelReturnWithArgument:
  Enabled: false

Lint/UnreachableLoop:
  Enabled: false

Style/AccessorGrouping:
  Enabled: false

Style/ArrayCoercion:
  Enabled: false

Style/BisectedAttrAccessor:
  Enabled: false

Style/CaseLikeIf:
  Enabled: false

Style/ExplicitBlockArgument:
  Enabled: false

Style/ExponentialNotation:
  Enabled: false

Style/GlobalStdStream:
  Enabled: false

Style/HashAsLastArrayItem:
  Enabled: false

Style/HashLikeCase:
  Enabled: false

Style/OptionalBooleanParameter:
  Enabled: false

Style/RedundantAssignment:
  Enabled: false

Style/RedundantFetchBlock:
  Enabled: false

Style/RedundantFileExtensionInRequire:
  Enabled: false

Style/RedundantRegexpCharacterClass:
  Enabled: false

Style/RedundantRegexpEscape:
  Enabled: false

Style/SingleArgumentDig:
  Enabled: false

Style/SlicingWithRange:
  Enabled: false

Style/StringConcatenation:
  Enabled: false

Performance/AncestorsInclude:
  Enabled: false

Performance/BigDecimalWithNumericArgument:
  Enabled: false

Performance/RedundantSortBlock:
  Enabled: false

Performance/RedundantStringChars:
  Enabled: false

Performance/ReverseFirst:
  Enabled: false

Performance/SortReverse:
  Enabled: false

Performance/Squeeze:
  Enabled: false

Performance/StringInclude:
  Enabled: false
