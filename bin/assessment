#!/usr/bin/env ruby
require 'bundler/setup'
require 'yaml'
require 'Metrc'

credentials = YAML.load_file('./spec/spec_credentials.yml')

state = {
  license: credentials['license'],
  batch_id: 'ABCDEF012345670000015394',
  items: [
    '1A4FF00000000C9000000714',
    '1A4FF00000000C9000000715',
    '1A4FF00000000C9000000716'
  ]
}

Metrc.configure do |config|
  config.user_key = credentials['user_key']
  config.api_key  = credentials['api_key']
  config.state    = credentials['state']
  config.sandbox  = true
end

license  = credentials['license']
batch_id = state[:batch_id]
client = Metrc::Client.new(user_key: credentials['user_key'], debug: true)
p "Launching #{credentials['state'].upcase} state, with license #{license}, and API #{client.uri}"

begin
  # Create plantings
  payload = [
    {
      Name: batch_id,
      Type: 'Clone',
      Count: 6,
      Strain: 'Dragonfly Kush',
      Location: 'Baby Room',
      Room: 'Baby Room',
      PatientLicenseNumber: nil,
      ActualDate: '2020-05-28'
    }
  ]
  # p "Planting: #{payload}"
  # client.create_plant_batches(license, payload)

  # Create planting package
  payload = [
    {
      PlantBatch: batch_id,
      Count: 3,
      Location: 'Product Vault',
      Room: 'Product Vault',
      Item: 'BLZ Immature Plant Item',
      Tag: '1A4FF01000000C9000000996',
      PatientLicenseNumber: nil,
      Note: '',
      IsTradeSample: false,
      IsDonation: false,
      ActualDate: '2020-05-29'
    }
  ]
  # p "Packaging planting: #{payload}"
  # client.create_plant_batch_package(license, payload)
  item = state[:items].first
  state[:items] -= [item]

  # Change growth phase
  payload = [
    {
      Name: batch_id,
      Count: 2,
      StartingTag: state[:items].first,
      GrowthPhase: 'Vegetative',
      NewRoom: 'Flowering Room',
      NewLocation: 'Flowering Room',
      GrowthDate: '2020-06-01',
      PatientLicenseNumber: nil
    }
  ]
  # p "Changing growth phase: #{payload}"
  # client.change_growth_phase(license, payload)

  # Destroy plant batch
  payload = [
    {
      PlantBatch: batch_id,
      Count: 1,
      ReasonNote: 'Other: needz more cowbell',
      ActualDate: '2020-06-01'
    }
  ]
  # p "Destroying plant batch: #{payload}"
  # client.destroy_plant_batches(license, payload)

  # Change plants growth phase
  item = state[:items].sample
  plant_step_1 = item
  payload = [
    {
      Label: item,
      NewTag: nil,
      GrowthPhase: 'Flowering',
      NewLocation: 'Flowering Room',
      NewRoom: 'Flowering Room',
      GrowthDate: '2020-06-01'
    }
  ]
  # p "Changing plants growth phase: #{payload}"
  # client.change_plant_growth_phase(license, payload)

  # Move plants
  payload = [
    {
      Id: nil,
      Label: item,
      Room: 'Flowering Room',
      Location: 'Flowering Room',
      ActualDate: '2020-06-01'
    }
  ]
  # p "Moving plant: #{payload}"
  # client.move_plants(license, payload)

  # Destroy plants
  item = state[:items].sample
  payload = [
    {
      Id: nil,
      Label: item,
      ReasonNote: 'Other: needz more cowbell',
      ActualDate: '2020-06-02'
    }
  ]
  # p "Destroying plant: #{payload}"
  # client.destroy_plants(license, payload)
  state[:items] -= [item]

  # Manicure plants
  item = plant_step_1
  harvest_name = "#{item}-harvest-2020-06-03"
  payload = [
    {
      Plant: item,
      Weight: 100.23,
      UnitOfWeight: 'Grams',
      DryingRoom: 'X2',
      DryingLocation: 'X2',
      ActualDate: '2020-06-03',
      PatientLicenseNumber: nil,
      HarvestName: harvest_name
    }
  ]
  # p "Manicure plant: #{payload}"
  # client.manicure_plants(license, payload)

  # Harvest plants
  harvest_name = "1A4FF00000000C9000000715-harvest-2020-06-04"
  payload = [
    {
      Plant: item,
      Weight: 100.23,
      UnitOfWeight: 'Grams',
      DryingRoom: 'X2',
      DryingLocation: 'X2',
      ActualDate: '2020-06-04',
      PatientLicenseNumber: nil,
      HarvestName: harvest_name
    }
  ]
  # p "Harvesting plant: #{payload}"
  # client.harvest_plants(license, payload)

  # Harvest package
  package = '1A4FF01000000C9000000602'
  payload = [
    {
      Tag: package,
      Location: 'X2',
      Room: 'X2',
      Item: 'DragonFly Clones',
      UnitOfWeight: 'Grams',
      PatientLicenseNumber: nil,
      Note: 'This is a note',
      IsProductionBatch: false,
      ProductionBatchNumber: nil,
      IsTradeSample: false,
      IsDonation: false,
      ProductRequiresRemediation: false,
      RemediateProduct: false,
      RemediationMethodId: nil,
      RemediationDate: nil,
      RemediationSteps: nil,
      ActualDate: '2020-06-05',
      Ingredients: [
        {
          HarvestName: harvest_name,
          Weight: 100.23,
          UnitOfWeight: 'Grams'
        }
      ]
    }
  ]
  p "Creating a harvest package: #{payload}"
  client.create_harvest_package(license, payload)

  p "Getting harvests"
  harvests = client.list_harvests(license)
  harvest = harvests.find { |item| item['Name'] == harvest_name }
  harvest_id = harvest['Id']

  payload = [
    {
      WasteType: 'Plant Material',
      UnitOfWeight: 'Grams',
      WasteWeight: 10.05,
      ActualDate: '2020-06-05',
      Id: harvest_id
    }
  ]
  p "Removing waste: #{payload}"
  client.remove_waste(license, payload)

  payload = [
    {
      Id: harvest_id,
      ActualDate: '2020-06-06'
    }
  ]
  p "Finishing a harvest: #{payload}"
  client.finish_harvest(license, payload)

  payload = [
    {
      Id: harvest_id
    }
  ]
  p "Unfinishing a harvest: #{payload}"
  client.unfinish_harvest(license, payload)

  p "Done on #{credentials['state'].upcase} state, with license #{license}!"
  p '#' * 120
rescue => exception
  p "Issue found: #{exception}"
  exit 1
end
